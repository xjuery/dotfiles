#!/bin/bash

sendkey(){
	local windowid=$1
	local text=$2

	local previous=$(xdotool getactivewindow)
	xdotool windowactivate --sync $windowid type $text
	xdotool windowactivate --sync $windowid key Return
	xdotool windowactivate $previous
}

findwindow(){
	local windowName=$1
	xdotool search --class $windowName
}

burniso() {
	local isofile=$1

	if [ -z "$2" ]
	then
		local sp=1
	else
		local sp=$2
	fi

	sudo wodim dev=/dev/sr0 -v speed=$sp -eject "$isofile"
}

dstopall(){
  docker stop `docker ps -aq`
}

dcleanup(){
	local containers
	containers=( $(docker ps -aq 2>/dev/null) )
	docker rm "${containers[@]}" 2>/dev/null
	local volumes
	volumes=( $(docker ps --filter status=exited -q 2>/dev/null) )
	docker rm -v "${volumes[@]}" 2>/dev/null
	local images
	images=( $(docker images --filter dangling=true -q 2>/dev/null) )
	docker rmi "${images[@]}" 2>/dev/null
}

del_stopped(){
	local name=$1
	local state
	state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)

	if [[ "$state" == "false" ]]; then
		docker rm "$name"
	fi
}

relies_on(){
	for container in "$@"; do
		local state
		state=$(docker inspect --format "{{.State.Running}}" "$container" 2>/dev/null)

		if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
			echo "$container is not running, starting it for you."
			$container
		fi
	done
}

htop(){
	docker run --rm -it \
		--pid host \
		--net none \
		--name htop \
		jess/htop
}

vscode(){
	del_stopped visualstudio

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix  \
		-e "DISPLAY=unix${DISPLAY}" \
		--name visualstudio \
		jess/vscode
}

wireshark(){
	del_stopped wireshark

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		--net host \
		--name wireshark \
		jess/wireshark
}

tgzinstall(){
	curl -sSL $1 | tar -v -C $2 -xz
}

chrome(){
  STATE=$(docker ps --all --filter="name=xj-chrome" --format="exists")
  if [ "$STATE" == "" ]
  then
  docker run -d \
    --name=xj-chrome \
    --cap-add=SYS_ADMIN \
    --security-opt seccomp:unconfined \
    --net=host \
    --env="DISPLAY" \
    --env="HOST_UID=$(id -u)" \
    --env="HOST_GID=$(id -g)" \
    --device /dev/snd \
    --log-driver=journald \
    --volume="/etc/localtime:/etc/localtime:ro" \
    --volume="/tmp/.X11-unix:/tmp/.X11-unix:rw" \
    --volume="/dev/shm:/dev/shm:rw" \
    --volume="$HOME/downloads:/home/docker/Downloads:rw" \
    --volume="/usr/share/icons:/usr/share/icons:ro" \
    --volume="/usr/share/fonts:/usr/share/fonts:ro" \
    --volume="/etc/fonts:/etc/fonts:ro" \
    --volume="/var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket:ro" \
    --volume="$HOME/.Xauthority:/home/docker/.Xauthority:ro" \
    --volume="$HOME/.cache/google-chrome-cache:/home/docker/.cache/google-chrome:rw" \
    --volume="$HOME/.cache/google-chrome-config:/home/docker/.config/google-chrome:rw" \
    xj-chrome
  else
    docker start xj-chrome
  fi
}

gmail(){  
  STATE=$(docker ps --all --filter="name=xj-mutt" --format="exists")
  if [ "$STATE" != "" ]
  then
      dcleanup
  fi

  export GMAIL='xavier.juery'
  export GMAIL_NAME='Xavier JUERY'
  export GMAIL_FROM='xavier.juery@gmail.com'

  docker run -it \
          -v /etc/localtime:/etc/localtime:ro \
          -e GMAIL -e GMAIL_NAME \
          -e GMAIL_PASS -e GMAIL_FROM \
          --name xj-mutt \
          xj-mutt

}

archive(){
	tar cvf $1.tar $1
	gzip $1.tar
}

mountgd(){
	google-drive-ocamlfuse ~/Documents/GoogleDrive/
}

umountgd(){
	fusermount -u ~/Documents/GoogleDrive/
}

